{"version":3,"sources":["reportWebVitals.js","Components/CategoryAdd.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protoTypes","PropTypes","func","isRequireds","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,sCCJDQ,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBS,SAACP,GAClBF,EAAcE,EAAEQ,OAAOF,aAuB/BZ,EAAYe,WAAa,CACrBd,cAAee,IAAUC,KAAKC,a,mCC9BrBC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,uDAFP,mCAEO,cACyDF,EADzD,sBAGAG,MAAMD,GAHN,cAGbE,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAVvB,kBAcZK,GAdY,4CAAH,sDCDPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACrC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAMd,EAAMe,IAAMN,IACvB,4BAAKA,QCFJO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAEtB,ECHwB,SAACA,GACzB,MAA0BlB,mBAAS,CAC/BwB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OARAC,qBAAU,WACNvB,EAAQC,GACH1B,MAAK,SAAAsC,GAAM,OAAIS,EAAS,CACrBf,KAAMM,EACNO,SAAS,SAElB,CAACnB,IAEGoB,EDX2BG,CAAavB,GAAjCY,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDf,IACjDmB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAgB,GACP,OAAO,cAAC,EAAD,eAECA,GADCA,EAAMd,aEX1Be,EAAe,WAExB,MAAoC3C,mBAAS,CAAC,aAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ6C,EAAWlB,KAAI,SAACR,GACZ,OAAO,cAAC,EAAD,CAEHA,SAAUA,GADLA,YCXjC2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1B5D,M","file":"static/js/main.f1423fea.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const CategoryAdd = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n\n    const handleChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats])\n            setInputValue('')\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleChange}\n            />\n        </form>\n    )\n}\n\nCategoryAdd.protoTypes = {\n    setCategories: PropTypes.func.isRequireds\n}","\nconst api_key = '3ecVEmLbJjwUBRPUq9fDGM8G0U4naDwk'\n\nexport const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${ api_key }&q=${ category }&limit=10`\n\n    const resp = await fetch(url)\n    const { data } = await resp.json()\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title }/>\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category)\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map(image => {\n                        return <GifGridItem\n                            key={image.id}\n                            {...image}\n                        />\n                    })\n                }\n\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifs(category)\n            .then(images => setState({\n                data: images,\n                loading: false\n            }))\n    }, [category])\n\n    return state\n}","import React, { useState } from 'react'\n\nimport { CategoryAdd } from './Components/CategoryAdd'\nimport { GifGrid } from './Components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Fortnite'])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <CategoryAdd setCategories={setCategories} />\n            <hr />\n            <ol>\n                {\n                    categories.map((category) => {\n                        return <GifGrid\n                            key={category}\n                            category={category}\n                        />\n                    })\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport { GifExpertApp } from './GifExpertApp'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}